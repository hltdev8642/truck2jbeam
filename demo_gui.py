#!/usr/bin/env python3
"""
Demo script for the RoR GUI application
"""

import tkinter as tk
from tkinter import messagebox
import subprocess
import sys
import os

def check_dependencies():
    """Check if required dependencies are available"""
    try:
        import requests
        import bs4
        return True
    except ImportError:
        return False

def show_gui_features():
    """Show GUI features information"""
    features_text = """üöÄ RoR Downloader & truck2jbeam Converter GUI

Key Features:

üîç SEARCH INTERFACE
‚Ä¢ Efficient sitemap-based resource discovery
‚Ä¢ Real-time search through 935+ RoR resources
‚Ä¢ Category filtering and result limits
‚Ä¢ Fast URL filtering (~0.5s search times)

üìä RESOURCE BROWSER
‚Ä¢ Table view with ID, title, author, category
‚Ä¢ Download status tracking
‚Ä¢ Multi-select capabilities
‚Ä¢ Detailed resource information dialogs

‚¨áÔ∏è DOWNLOAD MANAGEMENT
‚Ä¢ Download queue with progress indicators
‚Ä¢ Pause/resume functionality
‚Ä¢ Concurrent download management
‚Ä¢ Auto-extraction options

üîÑ CONVERSION PIPELINE
‚Ä¢ Integrated truck2jbeam conversion
‚Ä¢ Mesh conversion to DAE/Blend formats
‚Ä¢ Configurable output settings
‚Ä¢ Progress tracking and error handling

üìÅ FILE MANAGEMENT
‚Ä¢ File browser for input selection
‚Ä¢ Output directory management
‚Ä¢ Quick folder access buttons
‚Ä¢ Drag-and-drop support (planned)

‚öôÔ∏è SETTINGS PANEL
‚Ä¢ Download directory configuration
‚Ä¢ Conversion parameter settings
‚Ä¢ Mesh output format selection
‚Ä¢ User preference management

üìù STATUS & LOGGING
‚Ä¢ Real-time operation status
‚Ä¢ Comprehensive logging panel
‚Ä¢ Error reporting and completion messages
‚Ä¢ Collapsible log view

üéØ KEYBOARD SHORTCUTS
‚Ä¢ Ctrl+O: Open RoR file
‚Ä¢ Ctrl+F: Focus search
‚Ä¢ F5: Perform search
‚Ä¢ Ctrl+Q: Quit application

üñ•Ô∏è RESPONSIVE DESIGN
‚Ä¢ Resizable panels and windows
‚Ä¢ Cross-platform compatibility
‚Ä¢ Tooltips and help text
‚Ä¢ Modern tkinter interface
"""
    
    root = tk.Tk()
    root.withdraw()  # Hide main window
    
    messagebox.showinfo("RoR GUI Features", features_text)
    root.destroy()

def launch_gui():
    """Launch the GUI application"""
    if not check_dependencies():
        root = tk.Tk()
        root.withdraw()
        
        install_deps = messagebox.askyesno(
            "Missing Dependencies",
            "Required dependencies are missing.\n\n"
            "Would you like to install them now?\n"
            "(This will run: pip install requests beautifulsoup4)"
        )
        
        if install_deps:
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", "requests", "beautifulsoup4"])
                messagebox.showinfo("Success", "Dependencies installed successfully!\nLaunching GUI...")
            except subprocess.CalledProcessError as e:
                messagebox.showerror("Installation Failed", f"Failed to install dependencies:\n{e}")
                root.destroy()
                return
        else:
            root.destroy()
            return
        
        root.destroy()
    
    # Launch the GUI
    try:
        subprocess.Popen([sys.executable, "ror_gui.py"])
        print("‚úÖ RoR GUI launched successfully!")
        print("   Check your taskbar for the application window.")
    except Exception as e:
        print(f"‚ùå Failed to launch GUI: {e}")

def main():
    """Main demo function"""
    print("üéÆ RoR Downloader & truck2jbeam Converter GUI Demo")
    print("=" * 60)
    
    while True:
        print("\nChoose an option:")
        print("1. Show GUI Features")
        print("2. Launch GUI Application")
        print("3. Exit")
        
        choice = input("\nEnter your choice (1-3): ").strip()
        
        if choice == "1":
            show_gui_features()
        elif choice == "2":
            launch_gui()
            break
        elif choice == "3":
            print("üëã Goodbye!")
            break
        else:
            print("‚ùå Invalid choice. Please enter 1, 2, or 3.")

if __name__ == "__main__":
    main()
